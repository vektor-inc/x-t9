/* WordPress標準の仕様の注意 *****************************************

.is-layout-constrained
中の要素が 最大幅 : コンテンツ幅 / 左右 : auto になる

.is-layout-flow ( or .is-layout-constrained がついていない
中の要素は 最大幅 : 100%（親の幅に追従）になる

コンテンツ幅（ .is-layout-constrained ）に指定すると
「ネストしたブロックはコンテンツ幅を使用し、オプションで全幅、幅広に設定できます。」
の文字が表示される

.is-layout-constrained のクラスの中の要素にコンテンツ幅が適用されるのであって、
.is-layout-constrained のクラス自体にコンテンツ幅が適用されるわけではない。

/* マイナスオフセットする必要があるケース ******************************************

.alignfull や .alignwide に .is-layout-constrained が付いていようが、
.alignfull や .alignwide 直下の .alignfull や .alignwide の要素はコンテンツ幅の中に入っているわけではないため、
マイナスオフセットする必要はなく、中央揃えにする

親要素が .is-layout-constrained の場合は中の要素がコンテンツ幅になるが、
直下の .alignfull や .alignwide にはコンテンツ幅は適用されないのでマイナスオフセットする必要がない。
ただし、コンテンツ幅指定の中のブロック（コンテンツ幅）のさらに中で .alignfull や .alignwide が指定された場合は、
マイナスオフセットが必要になる。

/* 編集画面での特性 ******************************************

編集画面の .is-root-container 付与される .is-layout-constrained は、
テンプレートファイルの single.html や page.html に
<!-- wp:post-content {"layout":{"type":"constrained"}} /--> がある場合に付与される。
<!-- wp:post-content /--> だけの場合は .is-root-container に .is-layout-flow が付与される。

*/

:is( .alignfull,.vk_outer-width-full ) {
	// 直下でも constrained の中でも幅は同じ
	&,
	.is-layout-constrained & {
		// width: var(--wp--custom--width--wrapper);
		// を指定してしまうを Windows でスクロールバーまでの幅を含めてた広さで検出してしまい、
		// .alignfull のついていないHTML直下の要素の幅（100%）と差が発生する。
		// これにより
		// .alignfull > .is-layout-constrained > * と
		// * > .is-layout-constrained > * で位置にズレが発生する
		max-width: var(--wp--custom--width--wrapper) !important;
		&.wp-block-image {
			// Default block style overwrite
			max-width: var(--wp--custom--width--wrapper);
		}
	}
}

.alignwide {
	width: calc(100% + (var(--wp--custom--width--wrapper) - 100%) / 2);
}

/** Minus offset for alignfull and alignwide *****************************/

:is( .alignfull,.vk_outer-width-full ) {
	.vk_outer_container > &,
	// インナーコンテナを持つブロック直下に全幅指定された場合
	.is-layout-constrained[class*="__inner-container"] > &,
	// .is-layout-constrained > の中の要素（コンテンツ幅） の中に全幅を配置された場合
	// ※ 2階層目のコンテンツ幅の中にグループなどが入ってさらにその中になる事もあるので & の前に > は付けない
	.is-layout-constrained > * & {
		margin-left: calc( 50% - var(--wp--custom--width--wrapper) / 2 ) !important;
		margin-right: calc( 50% - var(--wp--custom--width--wrapper) / 2 ) !important;
	}
}

.alignwide {

	// 通常幅でインナーコンテナを持つブロック直下に幅広指定された場合
	// （全幅や幅広のブロックのインナーコンテナの時点ではコンテンツ幅になっていないのでマイナスオフセットする必要がない）
	:where(:not(:is(.alignfull, .alignwide))) > .is-layout-constrained[class*="__inner-container"] > &,

	// .is-layout-constrained > の直下の要素（コンテンツ幅） > の直下に幅広を配置された場合
	// ※ 2階層目がコンテンツ幅なので、最初の .is-layout-constrained の要素は alignll でも alignwide でも関係ない
	.is-layout-constrained > :where(:not(:is(.alignfull, .alignwide))) > &,

	// 通常幅の .is-layout-constrained > の直下の要素（コンテンツ幅） の中（3階層）の更に中（4階層）以降に幅広を配置された場合にマイナスオフセットする
	// ※ 3階層は既にひとつ上の項目でやってる
	// ※ コンテンツ幅の中にグループなどが入ってさらにその中（4階層以上）になる事もあるので、2階層と3階層の間には > は付けない
	// ※ is( .alignnfull, .alignwide ) > .alignwide の場合はマイナスオフセットしない

	.is-layout-constrained:where(:not(:is(.alignfull,.alignwide))) > :where(:not(:is(.alignfull,.alignwide))) :where(:not(:is(.alignfull, .alignwide))) > & {
		margin-left: calc((100% - var(--wp--custom--width--wrapper)) / 4) !important;
		margin-right: calc((100% - var(--wp--custom--width--wrapper)) / 4) !important;
	}
}

/** サイドバーがある場合の幅調整 *****************************/

.is-style-main-layout:has(.is-style-main-layout-sidebar) {
	&>.wp-block-column {
		:is(.alignfull, .alignwide) {
			margin-left: 0 !important;
			margin-right: 0 !important;
			width: 100%;
		}
	}
}